(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? expr num)
  (and (number? expr) (= expr num)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
	((=number? a2 0) a1)
	((and (number? a1) (number? a2)) (+ a1 a2))
	(else (list a1 '+ a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
	((=number? m1 1) m2)
	((=number? m2 1) m1)
	((and (number? m1) (number? m2)) (* m1 m2))
	(else (list m1 '* m2))))

(define (make-exponentiation b e)
  (cond ((=number? e 1)	b)
	((=number? e 0) 1)
	((and (number? b) (number? e)) (expt b e))
	(else (list b '** e))))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))

(define (exponentiation? x)
  (and (pair? x) (eq? (cadr x) '**)))
(define (base e) (car e))
(define (exponent e) (caddr e))

(define (parse expr)
  (cond ((not (pair? expr)) expr)
	((null? (cdr expr)) (car expr))
;	((eq? (cadr expr) '+) (cons (parse (car expr))
;					(list '+ (parse (cddr expr))))))
	((sum? expr) (make-sum (parse (car expr))
			       (parse (cddr expr))))
	((product? expr) (parse (cons (make-product (parse (car expr))
						    (parse (caddr expr)))
				      (cdddr expr))))))

(define (deriv expr var)
  (let ((pexpr (parse expr)))
    (cond ((number? pexpr) 0)
	  ((variable? pexpr)
	   (if (same-variable? pexpr var) 1 0))
	  ((sum? pexpr)
	   (make-sum (deriv (addend pexpr) var)
		     (deriv (augend pexpr) var)))
	  ((product? pexpr)
	   (make-sum
	     (make-product (multiplier pexpr)
			   (deriv (multiplicand pexpr) var))
	     (make-product (deriv (multiplier pexpr) var)
			   (multiplicand pexpr))))
	  ((exponentiation? pexpr)
	   (make-product (make-product (exponent pexpr)
				       (make-exponentiation (base pexpr)
							    (- (exponent pexpr) 1)))
			 (deriv (base pexpr) var)))
	  (else
	    (error "unknown expression type - DERIV" pexpr)))))
